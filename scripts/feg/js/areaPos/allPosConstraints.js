// Copyright 2017 Yoav Seginer, Theo Vosse, Gil Harari, and Uri Kolodny.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file provides an object which contains all positioning constraints
// defined on a given area. This object, 'AllPosConstraints' is attached
// to an area and holds a single 'PosConstraint' object for each
// constraint defined in the description of the area (this area will
// be referred to as the base area of this set of constraints).
// In addition, this object adds (for each area) the automatic constraints
// required for that area.
//
// This object is derived from the 'PosConstraintManager' object, which
// performs much of the actual management of the constraints. The main
// functions of the derived class defined here (AllPosConstraints) is
// to define the reserved name constraints and their groups and add
// automatic constraints. An additional task of this object is the
// clean-up of positioning registrations when the parent area is destroyed.
//
// It is assumed that position constraints are defined under the 'position'
// field of an area's description. The value of this field is an object
// whose attributes are constraint names and the values under these attributes
// are constraint definition objects.
//
// At present, the name of each constraint (the attribute under which it
// appears) only plays a role in the system if it is a reserved name.
// Reserved names provide shorthand for certain standard constraints.
// The value under a reserved name is resolved by
// 'resolveReservedConstraint()', which extracts its type and value.
//
// The list of supported reserved names is defined below as
//   AllPosConstraints.prototype.reservedNames .
//
// A reserved constraint is first converted into a constraint
// of a standard format. All these constraints are assumed to refer to
// the content of the embedding area of this area. So percentages create
// a linear constraint relative to the corresponding property (width/height)
// of the content of the embedding area and offsets (top/bottom/left/right)
// are calculated relative to the content of the embedding area. Center
// alignment is also relative to the embedding area.
// The properties width/height/top/bottom/left/right position the frame
// of the area (that is, the outer side of the border, if any) while
// innerWidth and innerHeight position the content of the area
// (whatever is inside the border, if any).
// However, "content-XXX" constraints consider their embedding to be the frame,
//  so that 'content-width: 80%'  makes the content width 80% of the frame
//  width, and 'content-right: 5' makes the right edge of the content be 5
//  pixels to the left of the frame's right edge.
//
// The 'width-to-height' constraint constrains the ratio between the
// width and the height. The value given is width/height, so '50%'
// means that the width is half the height.
//
// Some constraint groups are availabale, see
//   AllPosConstraints.prototype.reservedGroupNames .
//
// There are two types of automatic constraints defined for an area:
//
// 1. Content offset constraints which depend on the content offset mode
//    of the area. For more details, see the bottom of the file, where these
//    constraints are defined.
// 2. automatic point constraints: certain point labels, when added, require
//    constraints to position them in a pre-defined way. For more details,
//    see the documentation in 'automaticPointConstraints.js'. 
//
// The automatic constraints are managed similarly to other constraints and
// are therefore assigned names (the difference with configuration based
// constraints being that no prefix is added to the internal name of
// automatic constraints).

//
// Constructor
//

// The 'systemPositioning' flag is true if the positioning constraints
// given here were generated by the system (as opposed to originating in the
// configuration file). This allows the constraints to be assigned a priority
// higher than the maximal allowed for constraints originating in the
// configuration.

// %%include%%: "posConstraintManager.js"

inherit(AllPosConstraints, PosConstraintManager);
function AllPosConstraints(area)
{
    this.systemPositioning = area.systemPositioning;

    // automatic point constraint module initialization
    this.initAutomaticPointConstraints();

    // call the base class constructor (without passing a description,
    // this will be done below in 'updateDescription').
    this.PosConstraintManager(area, this.systemPositioning);

    // globalPosConstraintSynchronizer.add(this.cm.getRoot());
}

// This function should be called when this object is destroyed. It removes
// all constraints registered by this object.

AllPosConstraints.prototype.destroy = allPosConstraintsDestroy;
function allPosConstraintsDestroy()
{
    this.removeAllAutomaticPointConstraints();
    this.destroyConstraints(); // from the base class
    // globalPosConstraintSynchronizer.remove(this.cm.getRoot());
}

///////////////////////////
// Automatic Constraints //
///////////////////////////

// This function adds the automatic constraints, as specified at the top of
// this file.

AllPosConstraints.prototype.addAutoConstraints =
    allPosConstraintsAddAutoConstraints;

function allPosConstraintsAddAutoConstraints()
{
    var areaId = this.baseArea.areaId;

    // add content positioning constraints
    
    if(this.baseArea.isInAutoContentOffsetMode())
        this.setAllAutoContentConstraints();

    // add constraints that are not directly prescribed by the description.
    // These include RV-points, center points and intersection points
    this.recreateAutomaticPointConstraints();
}

///////////////////////////////////
// Automatic content constraints //
///////////////////////////////////

// The names of the content - frame constraints are:
// 1. left-content-offset
// 2. right-content-offset
// 3. top-content-offset
// 4. bottom-content-offset

// This function sets the automatic content offset constraint for the given
// edge of the area to the given offset. A positive offset always indicates
// that the content is inside the frame, so for left and top the offset
// is from the frame to the content while for right and bottom the offset
// is from the content to the frame.
// The constraints created are automatic with high priority.

AllPosConstraints.prototype.setAutoContentConstraint =
    allPosConstraintsSetAutoContentConstraint;

function allPosConstraintsSetAutoContentConstraint(edge, offset)
{
    if(!offset)
        offset = 0; // undefined offset is equivalent to zero offset
    
    var description;
    
    switch(edge) {
        case "left":
        case "top":
            description = this.makeSegmentDesc([edge], [edge, undefined, true],
                                               offset, offset);
            break;
        case "right":
        case "bottom":
            description = this.makeSegmentDesc([edge, undefined, true],
                                               [edge], offset, offset);
            break;
        default:
            cdlInternalError("unknown auto content constraint edge: ",
                                 edge);
            return;
    }

    description.priority = strongAutoPosPriority;

    var name = edge + "-content-offset";
    
    this.addConstraint(name, description, true);
}

// This function reads the content offsets from the ContentPosManager
// object and sets the automatic constraints for them

AllPosConstraints.prototype.setAllAutoContentConstraints =
    allPosConstraintsSetAllAutoContentConstraints;

function allPosConstraintsSetAllAutoContentConstraints()
{
    var contentPosManager = this.baseArea.contentPosManager;

    if(!contentPosManager)
        return;

    for(var edge in ContentPosManager.edgeNames)
        this.setAutoContentConstraint(edge, contentPosManager.offsets[edge]);
}

// This function removes all automatic content offset constraints

AllPosConstraints.prototype.removeAutoContentConstraints =
    allPosConstraintsRemoveAutoContentConstraints;

function allPosConstraintsRemoveAutoContentConstraints()
{
    for(var edge in ContentPosManager.edgeNames)
        this.removeConstraint(edge + "-content-offset");
}
